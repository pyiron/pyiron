matrix:
  include:
    - stage: test
      name: test_linux_3_7
      os: linux
      language: python
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" PYTHONVER="3.7"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
        - python .ci_support/pyironconfig.py
        - ./.ci_support/setup_pyiron.sh ${PYTHONVER}
      script:
        - coverage run -m unittest discover tests
        - coverage combine
        # - ./.ci_support/build_notebooks_on_master.sh
      after_success:
        - coveralls
        - coverage xml
        - pip install codacy-coverage
        - python-codacy-coverage -r coverage.xml
      deploy:
        - provider: pypi
          user: pyiron
          password: ${PYPI_UPLOAD_TOKEN}
          allow_failure: true
          on:
            branch: master
        - provider: pypi
          user: pyiron
          password: ${PYPI_UPLOAD_TOKEN}
          allow_failure: true
          on:
            tags: true

    - name: test_osx_3_7
      os: osx
      language: generic
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" PYTHONVER="3.7"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
        - python .ci_support/pyironconfig.py
        - ./.ci_support/setup_pyiron.sh ${PYTHONVER}
      script:
        - coverage run -m unittest discover tests
        - coverage combine
        # - ./.ci_support/build_notebooks_on_master.sh

    - stage: documentation
      if: branch = master
      name: documentation
      os: linux
      language: python
      env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" PYTHONVER="3.7"
      install:
        - export PATH="$HOME/miniconda/bin:$PATH"
        - ./.ci_support/setup_miniconda.sh ${MINICONDA}
        - python .ci_support/pyironconfig.py
        - ./.ci_support/setup_pyiron.sh ${PYTHONVER}
      script:
        - ./.ci_support/build_docs_on_master.sh
      deploy:
        - provider: pages
          repo: pyiron/pyiron.github.io
          target_branch: master
          skip_cleanup: true
          github_token: $GH_TOKEN
          local_dir: ../pyiron.github.io
          on:
            branch: master

    - stage: websitevalidation
      if: branch = master
      name: websitevalidation
      os: linux
      language: python
      script:
        - echo -e "from urllib.request import urlopen\nurlopen('https://pyiron.github.io')" > test.py
        - python test.py

    # - stage: anaconda
    #   if: branch = master
    #   name: anaconda
    #   os: linux
    #   language: python
    #   env: MINICONDA="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh" PYTHONVER="3.7"
    #   install:
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - ./.ci_support/setup_miniconda.sh ${MINICONDA} ${PYTHONVER}
    #   script:
    #     - ./.ci_support/setup_upload.sh
    #   deploy:
    #     - provider: script
    #       script: conda build --python ${PYTHONVER} --user pyiron --token ${CONDA_UPLOAD_TOKEN} conda/pyiron
    #       on:
    #         branch: master
    #     - provider: script
    #       script: conda build --python ${PYTHONVER} --user pyiron --token ${CONDA_UPLOAD_TOKEN} conda/pyiron
    #       on:
    #         tags: true

    - stage: docker
      if: branch = master
      name: docker
      sudo: required
      services:
        - docker
      language: generic
      env:
        global:
          - COMMIT=${TRAVIS_COMMIT::8}
      script:
        - mv binder/docker/* .
        - mv notebooks/* .
        - docker build -t pyiron -f ./Dockerfile .
      deploy:
        - provider: script
          skip_cleanup: true
          script: ./deploy.sh
          on:
             all_branches: true
             repo: pyiron/pyiron
